// <p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
// $$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
// <p>Let us list the factors of the first seven triangle numbers:</p>
// \begin{align}
// \mathbf 1 &amp;\colon 1\\
// \mathbf 3 &amp;\colon 1,3\\
// \mathbf 6 &amp;\colon 1,2,3,6\\
// \mathbf{10} &amp;\colon 1,2,5,10\\
// \mathbf{15} &amp;\colon 1,3,5,15\\
// \mathbf{21} &amp;\colon 1,3,7,21\\
// \mathbf{28} &amp;\colon 1,2,4,7,14,28
// \end{align}
// <p>We can see that $28$ is the first triangle number to have over five divisors.</p>
// <p>What is the value of the first triangle number to have over five hundred divisors?</p>


fn main() {
    let triangles = (1..).map(|x: u64| ((x+1) * x)>>1);
    let mut primes = project_euler::primes::primes();
    for triangle in triangles {
        println!("triangle={}", triangle);
        let factors = primes.factorize(triangle);
        let mut num_divisors = 1;
        for (_, degree) in factors.iter() {
            num_divisors *= degree + 1;
        }
        if num_divisors > 500 {
            println!("{} has {} divisors", triangle, num_divisors);
            break;
        }
    }
}